name: Build & Review & Acceptance tests
on:
  pull_request:
  workflow_dispatch:
    inputs:
      build_required:
        description: "Build images (true/false)"
        required: true
        default: "false"
      pr_number:
        description: "Pull request number (if redeploy without build) or own number for environment"
        required: true

env:
  CONTAINER_REGISTRY: ghcr.io
  CONTAINER_REGISTRY_USER: ${{ secrets.GHCR_CONTAINER_REGISTRY_USER }}
  CONTAINER_REGISTRY_PASSWORD: ${{ secrets.GHCR_TOKEN }}
  CONTAINER_REGISTRY_REPO: ghcr.io/city-of-helsinki/${{ github.event.repository.name }}
  REPO_NAME: ${{ github.event.repository.name }}
  KUBECONFIG_RAW: ${{ secrets.KUBECONFIG_RAW }}
  BUILD_ARTIFACT_FOLDER: 'build_artifacts'
  SERVICE_ARTIFACT_FOLDER: 'service_artifacts'
  BASE_DOMAIN: ${{ secrets.BASE_DOMAIN_STAGING }}
  DATABASE_USER: user
  DATABASE_PASSWORD: testing-password
  K8S_REQUEST_CPU: 50m
  K8S_REQUEST_RAM: 200Mi
  K8S_LIMIT_CPU: 500m
  K8S_LIMIT_RAM: 400Mi
  EMPLOYER_URL: https://kesaseteli-employer-${{ github.event.pull_request.number }}.${{ secrets.BASE_DOMAIN_STAGING }}
  HANDLER_URL: https://kesaseteli-hendler-${{ github.event.pull_request.number }}.${{ secrets.BASE_DOMAIN_STAGING }}
  NEXT_PUBLIC_BACKEND_URL: https://kesaseteli-backend-${{ github.event.pull_request.number }}.${{ secrets.BASE_DOMAIN_STAGING }}
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        service: [ 'backend', 'employer' ]
        include:
          - service: backend
            context: ./backend
            dockerfile: ./backend/Dockerfile
            port: 8000
          - service: employer
            context: ./frontend
            dockerfile: ./frontend/employer/Dockerfile
            port: 3000
    runs-on: ubuntu-latest
    name: Build
    steps:
      - uses: actions/checkout@v2

      - name: Build ${{ matrix.service }}
        if: github.event_name == 'pull_request' || github.event.inputs.build_required == 'true'
        uses: andersinno/kolga-build-action@v2
        env:
          DOCKER_BUILD_ARG_NEXT_PUBLIC_BACKEND_URL: ${{ env.NEXT_PUBLIC_BACKEND_URL }}
          DOCKER_BUILD_SOURCE: ${{ matrix.dockerfile }}
          DOCKER_BUILD_CONTEXT: ${{ matrix.context }}
          DOCKER_IMAGE_NAME: ${{ matrix.service }}
          SERVICE_PORT: ${{ matrix.port }}
  review:
    strategy:
      fail-fast: false
      matrix:
        service: [ 'backend', 'employer' ]
        include:
          - service: backend
            context: backend
            dockerfile: ./backend/Dockerfile
            database: true
            port: 8000
          - service: employer
            context: frontend
            dockerfile: ./frontend/employer/Dockerfile
            database: false
            port: 3000
    runs-on: ubuntu-latest
    needs: build
    name: Review
    steps:
      - uses: actions/checkout@v2
      - uses: andersinno/kolga-setup-action@v2
        with:
          pr_number: ${{ github.event.inputs.pr_number }}
      - name: Review-Services
        if: matrix.database
        uses: andersinno/kolga-deploy-service-action@v2
        with:
          projects: ${{ github.event.repository.name }}-${{ matrix.service }}
        env:
          POSTGRES_IMAGE: "docker.io/andersinnovations/postgis:11-bitnami"
      - name: Service with ingress
        run: |
          echo "ENVIRONMENT_URL=https://kesaseteli-${{ matrix.service }}-${{ github.event.pull_request.number }}.${{ env.BASE_DOMAIN }}" >> $GITHUB_ENV
      - name: Deploy
        uses: andersinno/kolga-deploy-action@v2
        env:
          DOCKER_BUILD_SOURCE: ${{ matrix.dockerfile }}
          DOCKER_BUILD_CONTEXT: ./${{ matrix.context }}
          DOCKER_IMAGE_NAME: ${{ matrix.service }}
          PROJECT_NAME: ${{ github.event.repository.name }}-${{ matrix.service }}
          K8S_SECRET_VERSION: ${{ github.sha }}
          VAULT_JWT_PRIVATE_KEY: ${{ secrets.VAULT_ACCESS_PRIVATE_KEY_REVIEW }}
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_KV_VERSION: "2"
          VAULT_JWT_AUTH_PATH: ${{ github.event.repository.name }}-${{ matrix.service }}-review
          VAULT_KV_SECRET_MOUNT_POINT: review
          SERVICE_PORT: ${{ matrix.port }}
          K8S_SECRET_ALLOWED_HOSTS: "*"
          APP_MIGRATE_COMMAND: ${{ matrix.database == true && '/app/.prod/on_deploy.sh' || ''}}
      - name: Create PR comment for kesaseteli-V${{ matrix.service }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: deployment-kesaseteli-${{ matrix.service }}
          message: |
            **KesÃ¤seteli-${{ matrix.service }} is deployed to: ${{ env.ENVIRONMENT_URL }}** :rocket::rocket::rocket:
  acceptance-tests:
    strategy:
      fail-fast: false
      matrix:
        service: [ 'employer' ]
    runs-on: ubuntu-latest
    needs: review
    name: Acceptance tests
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v2
      - name: Setup kubectl
        run: |
          echo "${{ env.KUBECONFIG_RAW }}" > $(pwd)/kubeconfig
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
        shell: bash
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.2
        with:
          node-version: '14'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn --prefer-offline --frozen-lockfile --check-files
      - name: Service with ingress
        run: |
          echo "ENVIRONMENT_URL=https://kesaseteli-${{ matrix.service }}-${{ github.event.pull_request.number }}.${{ env.BASE_DOMAIN }}" >> $GITHUB_ENV
      - name: Run Acceptance Tests for ${{ matrix.service }}
        id: testcafe
        run: yarn browser-test:${{ matrix.service }}:ci
        env:
          GITHUB_WORKFLOW_NAME: ${{ github.workflow }}
          GITHUB_WORKFLOW_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      - name: Upload Acceptance Test results for ${{ matrix.service }}
        run: |
          zip -r report.zip ${{ matrix.service }}/report/ > no_output 2>&1
          curl -s -H "Content-Type: application/zip" -H "Authorization: Bearer ${{ secrets.NETLIFY_AUTH_TOKEN }}" --data-binary "@report.zip" https://api.netlify.com/api/v1/sites > response.json
          echo "REPORT_URL=$(cat response.json|python -c "import sys, json; print('https://' + json.load(sys.stdin)['subdomain'] + '.netlify.com')")" >> $GITHUB_ENV
        if: always() && steps.testcafe.outcome == 'failure'
      - name: Create/update PR comment for Acceptance Test results
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: testcafe-results-kesaseteli
          message: |
            ## TestCafe result is __${{ steps.testcafe.outcome }}__ for ${{ env.ENVIRONMENT_URL }}! ${{steps.testcafe.outcome == 'success' && ':laughing::tada::tada::tada:' || ':crying_cat_face::anger::boom::boom:' }}
        if: always() && (steps.testcafe.outcome == 'success' || steps.testcafe.outcome == 'failure')
      - name: Create/update PR comment for Acceptance Test results
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: testcafe-results-kesaseteli
          append: true
          message: |
            **Check the report on: [${{ env.REPORT_URL }}](${{ env.REPORT_URL }})**
        if: always() && steps.testcafe.outcome == 'failure'
      - name: Upload screenshots and videos of failed tests to artifact
        uses: actions/upload-artifact@v2
        with:
          name: report
          path: ${{ matrix.service }}/report/
        if: always() && steps.testcafe.outcome == 'failure'
