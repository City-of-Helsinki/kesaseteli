import json

from django.http import HttpResponse, JsonResponse
from django.views.generic import View

from postings.models import TetPostingTemp


class MockCreateOrReadView(View):
    http_method_names = ["get", "post"]

    def get(self, request):
        postings = TetPostingTemp.objects.all()
        return JsonResponse([json.loads(p.data) for p in postings], safe=False)

    def post(self, request):
        if request.user.is_authenticated:
            # TODO do we need validation?
            body = request.body.decode("utf-8")
            data = json.loads(body)

            # Using user's email as the "owner" of the TET posting
            # In production version user sees only their own or their organization's postings
            p = TetPostingTemp(owner=request.user.email, data=json.dumps(data))
            p.save()

            # Save autogenerated id as part of data
            data["id"] = str(p.id)
            p.data = json.dumps(data)
            p.save()

            return JsonResponse(data)
        else:
            return HttpResponse("Unauthorized", status=401)


class MockEditOrDeleteView(View):
    http_method_names = ["put", "delete"]

    def put(self, request, id):
        if request.user.is_authenticated:
            p = TetPostingTemp.objects.get(pk=id)
            if not p:
                return HttpResponse("Not found", status=404)
            body = request.body.decode("utf-8")
            data = json.loads(body)
            p.data = json.dumps(data)
            p.save()

            return HttpResponse()
        else:
            return HttpResponse("Unauthorized", status=401)

    def delete(self, request, id):
        if request.user.is_authenticated:
            p = TetPostingTemp.objects.get(pk=id)
            if not p:
                return HttpResponse("Not found", status=404)
            p.delete()
            return HttpResponse()
        else:
            return HttpResponse("Unauthorized", status=401)
