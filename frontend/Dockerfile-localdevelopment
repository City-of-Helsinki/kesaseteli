# =======================================
FROM registry.access.redhat.com/ubi9/nodejs-18 AS distbase
# =======================================

USER root

# Install ca-certificates so that Sentry can upload source maps
RUN yum update -y && yum install -y ca-certificates && yum clean all

# Install yarn
RUN curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | tee /etc/yum.repos.d/yarn.repo
RUN yum -y install yarn

# =============================
FROM distbase AS appbase
# =============================

USER root

# Build ARGS
ARG PROJECT
ARG FOLDER

# Yarn
ENV YARN_VERSION 1.22.21

RUN yarn policies set-version "$YARN_VERSION"
RUN yarn config set ignore-engines true

WORKDIR /app

# Install dependencies
COPY --chown=default:default package.json yarn.lock ./
COPY --chown=default:default $PROJECT/$FOLDER/package.json $PROJECT/$FOLDER/package.json
COPY --chown=default:default $PROJECT/shared/package.json* $PROJECT/shared/package.json
COPY --chown=default:default shared/package.json shared/package.json
RUN --mount=type=cache,target="$PWD/.yarn_cache",sharing=locked YARN_CACHE_FOLDER="$PWD"/.yarn_cache yarn --frozen-lockfile --check-files --network-timeout 600000

# =============================
FROM appbase AS development
# =============================

# Copy all files
COPY --chown=default:default . .

# Use non-root user
USER default

# Set V8 max heap size to 2GB (default is 512MB)
# This prevents Docker Compose from crashing due to out of memory errors
ENV NODE_OPTIONS="--max_old_space_size=2048"

ARG PROJECT
ARG FOLDER
# Use non-root user
USER default
WORKDIR /app

# Copy all files
COPY --chown=default:default . .

ENV NEXT_TELEMETRY_DISABLED 1
# Bake package.json start command into the image
ENV DEV_START "yarn --cwd $PROJECT/$FOLDER dev"
CMD ["sh", "-c", "${DEV_START}"]
